%{
#include<stdio.h>
#include "parser.tab.hpp"  // to get the token types that we return
int yylex();            //added by me
void yyerror(char* s);  //added by me
int linenum = 0;
%}
COLONEQUAL_OP :=
PLUS_OP \+
MINUS_OP -
STAR_OP \*
DIVIDE_OP \/
EQUAL_OP =
NOTEQUAL_OP !=
LESSTHAN_OP <
GREATERTHAN_OP >
OPENPARAN_OP \(
CLOSEPARAN_OP \)
SEMICOLON_OP ;
COMMA_OP ,
LESSTHANEQUAL_OP <=
GREATERTHANEQUAL_OP \>=
NUMBER ([1-9][0-9]*)|0
IDENTIFIER [a-zA-Z][a-zA-Z0-9]*              
INTLITERAL {NUMBER}
FLOATLITERAL {NUMBER}\.([0-9]+)
STRINGLITERAL \"([^(\")]*)\"
COMMENT --(.*)
WHITESPACE (\t|\a|\b|\f|\r|\v)
NEWLINE \n
%%
(PROGRAM) {yylval.str_val = strdup(yytext); return PROGRAM;}
(BEGIN) return _BEGIN;
(END) return END;
(FUNCTION) return FUNCTION;
(READ) return READ;
(WRITE) return WRITE;
(IF) return IF;
(ELSE) return ELSE;
(FI) return FI;
(FOR) return FOR;
(ROF) return ROF;
(RETURN) return RETURN;
(INT) return INT;
(VOID) return VOID;
(STRING) return STRING;
(FLOAT) return FLOAT;
{PLUS_OP}		   return PLUS_OP;
{MINUS_OP}		   return MINUS_OP;
{COLONEQUAL_OP}	   return COLONEQUAL_OP;
{STAR_OP}		   return STAR_OP; 
{DIVIDE_OP}		   return DIVIDE_OP;
{EQUAL_OP}		   return EQUAL_OP;
{NOTEQUAL_OP}	   return NOTEQUAL_OP; 
{LESSTHAN_OP}	   return LESSTHAN_OP;
{GREATERTHAN_OP}   return GREATERTHAN_OP; 
{OPENPARAN_OP}	   return OPENPARAN_OP; 
{CLOSEPARAN_OP}	   return CLOSEPARAN_OP;
{SEMICOLON_OP}	   return SEMICOLON_OP; 
{COMMA_OP}		   return COMMA_OP; 
{LESSTHANEQUAL_OP} return LESSTHANEQUAL_OP; 
{GREATERTHANEQUAL_OP} return GREATERTHANEQUAL_OP; 
{IDENTIFIER}	   {yylval.str_val = strdup(yytext); return IDENTIFIER; }
{INTLITERAL}       {yylval.str_val = strdup(yytext); return INTLITERAL;} 
{FLOATLITERAL}     {yylval.str_val = strdup(yytext);return FLOATLITERAL;}
{STRINGLITERAL}	   {yylval.str_val = strdup(yytext);return STRINGLITERAL;}
{COMMENT}		   {}
{WHITESPACE}       {}
{NEWLINE}          {++linenum;}
.                              { /* absorb others */ }
%%
/*
int main(int argc, char** argv)
{
	yylex();
}*/
